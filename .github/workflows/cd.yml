name: 'CD'

on:
  push:
    branches:
    - main
    - staging
    - development
    
jobs:
  envs:
    name: 'Set environment'
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Define environment'
      id: env
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "::set-output name=environment::prd"
        elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
          echo "::set-output name=environment::staging"
        else
          echo "::set-output name=environment::dev"
        fi
        
    outputs: 
      environment: ${{ steps.env.outputs.environment }}
      
  terraform:
    needs: [envs]
    name: 'Deploy - ${{ needs.envs.outputs.environment }}'
    runs-on: ubuntu-latest
    environment: ${{ needs.envs.outputs.environment }}
  
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false